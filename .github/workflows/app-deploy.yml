name: Deploy App

on:
  workflow_call:
    inputs:
      event_type:
        description: "Remote workflow event type"
        type: string
        required: false
        default: 'app_deploy_v2'
      infra_repo:
        description: "Remote infrastructure repo"
        required: false
        type: string
        default: 'orbitmi/infra-live-apps'
      deploy_environment:
        description: "Environment where app will be deployed"
        required: false
        type: string
        default: "dev"
      infra_dir:
        description: "Directory where infra related config is located"
        required: false
        type: string
        default: "./infra"
      service_name:
        description: "Name or array of service name to be deployed"
        required: true
        type: string
      app_version:
        description: "Version"
        required: true
        type: string
      is_finished:
        description: "Wait for called event to finish"
        required: false
        type: boolean
        default: true
      platform:
        description: "Change the platform on which runner will be working on"
        required: false
        type: string
        default: self-hosted
    secrets:
      gh_token:
        required: true
      aws_role:
        description: "Role ARN"
        required: false

permissions:
  #id-token need to be set to "write" in order to use OpenID Connect auth with AWS
  id-token: write


jobs:
  prepare_data:
    name: 'Prepare data for deployment'
    runs-on: ${{ inputs.platform }}
    steps:
      - name: Get service name
        id: get_service_name
        run: |
          echo service_name=$(echo -n ${{ inputs.service_name }} | jq -cRs 'split(", ")')  >> $GITHUB_OUTPUT
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          token:  ${{ secrets.gh_token }}
          ref: ${{ env.APP_REVISION }}
      - name: Get repo data
        id: repo_data
        uses: orbitmi/gha-utils/actions/repo-data@v0.3.7
      - name: Configure AWS credentials (GitHub runners)
        uses: aws-actions/configure-aws-credentials@v2.0.0
        if: inputs.platform != 'self-hosted'
        with:
          aws-region: eu-central-1
          role-to-assume: ${{ secrets.aws_role }}
      - name: Configure AWS credentials (self-hosted runners)
        uses: aws-actions/configure-aws-credentials@v2.0.0
        if: inputs.platform == 'self-hosted'
        with:
          aws-region: eu-central-1
      - name: Check if tag exist
        id: chek_container_tag
        run: |
          format_image_tag(){
              local DOCKERFILE="$1"

              if [[ "${DOCKERFILE}" == "Dockerfile" ]]; then
                echo ${{ env.CONTAINER_REPO }}
              else
                SERVICE_NAME="/${DOCKERFILE%.*}"
                FORMAT_CONTAINER_REPO=$(echo ${{ env.CONTAINER_REPO }} | cut -f1-2 -d "/")
                echo ${FORMAT_CONTAINER_REPO}${SERVICE_NAME}
              fi
          }
          
          check_if_tag_exit(){
            local REPO_NAME="$1"

            IMAGE_META="$( aws ecr describe-images --repository-name="${REPO_NAME}" --image-ids=imageTag=${{ inputs.app_version }} 2> /dev/null )"
            if [[ $? == 0 ]]; then
                IMAGE_TAG="$( echo "${IMAGE_META}" | jq '.imageDetails[0].imageTags[0]' -r )"
                echo "Tag ${IMAGE_TAG} found"
            else
                echo "${{ inputs.app_version }} tag not found"
                exit 1
            fi
          }
          main(){
            if [[ ${{ env.CONTAINER_REPO }} == *"{container_prefix}"* ]];then
              DOCKERFILES=$(cd ${{ inputs.infra_dir }} || exit ; find * -name '*.Dockerfile')
            else
              DOCKERFILES=("Dockerfile")
            fi
            for FILE in ${DOCKERFILES[@]} ; do
              GET_CONTAINER_REPO=$(format_image_tag "${FILE}")
              GET_REPO_NAME=$( echo ${GET_CONTAINER_REPO} | cut -d/ -f2- )
              check_if_tag_exit "${GET_REPO_NAME}"
            done
          }
          main
    outputs:
      service_name: ${{ steps.get_service_name.outputs.service_name }}


  deploy:
    name: Run Repository Dispatcher
    runs-on: ubuntu-latest
    needs: [prepare_data]
    strategy:
      max-parallel: 1
      matrix:
        service_name: ${{ fromJson(needs.prepare_data.outputs.service_name) }}
    steps:
      - name: Get repo data
        id: repo_data
        uses: orbitmi/gha-utils/actions/repo-data@v0.3.7
      - name: Trigger deploy
        uses: orbitmi/gha-utils/actions/repo-dispatch@v0.3.7
        with:
          gh_token: ${{ secrets.gh_token }}
          repository: ${{ inputs.infra_repo }}
          event_type: ${{ inputs.event_type }}
          client_payload: '{"env": "${{ inputs.deploy_environment }}", "version": "${{ inputs.app_version }}", "name": "${{ matrix.service_name }}"}'
          wait: ${{ inputs.is_finished }}